Helpers
	letter		 = [['a'..'z']+['A'..'Z']];
	digit 		 = ['0'..'9'];

Tokens
	id 			 = ('_' | letter)('_'| letter | digit )*;
	string 		 = letter+;
	n_int		 = digit+;
	n_real		 = '-' ? digit+ '.' digit+;
	l_par        = '(';
	r_par        = ')';
	l_col		 = '[';
	r_col		 = ']';
	colon		 = ':';
	semi_c		 = ';';
	comma		 = ',';
	dot			 = '.';
	blank        = (' ' | 13 | 10)+;
	is	  		 = '<-';

	// operadores
	not	  		 = 'nao';
	and	  		 = 'e';
	or	  		 = 'ou';
	xor  		 = 'xor';
	equal 		 = '=';
	not_equal 	 = '<>';
	menor_equal  = '<=';
	maior_equal  = '>=';
	menorq 		 = '<';
	maiorq 		 = '>';
	plus 		 = '+';
	minus 		 = '-';
	mult         = '*';
	div          = '/';
	mod          = '%';

	// palavras reservadas

	program 	= 'programa';
	begin 		= 'inicio';
	end 		= 'fim';
	while		= 'enquanto';
	if			= 'se';
	else		= 'senao';
	do			= 'faca';
	real 		= 'real';
	inteiro 	= 'inteiro';
	char		= 'caractere';
	const		= 'const';


Ignored Tokens
	blank;

Productions
	var = id | id l_col n_int r_col;

	comando = var is exp semi_c ;

	valor = string | n_int | n_real;

	tipo = real | inteiro | char;

	declaracao = tipo colon {var comma} var semi_c
				| const id valor semi_c ;

	programa = program id begin {declaracao} {comando} end dot;


exp = valor
	| var
	| l_par exp r_par
	| minus exp
	| exp plus exp
	| exp minus exp
	| exp mult exp
	| exp div exp
	| exp-logica

exp-logica =
	| exp equal exp
	| exp notequal exp
	| exp menor_equal exp
	| exp maior_equal exp
	| exp menorq exp
	| exp maiorq exp
	| not exp-logica
	| exp-logica and exp-logica
	| exp-logica or exp-logica
	| exp-logica xorl exp-logica