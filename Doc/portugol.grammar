Helpers
	all			 = [0 .. 0xffff];
	letter		 = [['a'..'z']+['A'..'Z']];
	digit 		 = ['0'..'9'];

States
	normal, comment;

Tokens

	// Símbolos

	{normal}	l_par        = '(';
	{normal}	r_par        = ')';
	{normal}	l_bra		 = '[';
	{normal}	r_bra		 = ']';
	{normal}	colon		 = ':';
	{normal}	semi_c		 = ';';
	{normal}	comma		 = ',';
	{normal}	dot			 = '.';
	{normal}	blank        = (' '| 9 | 10 | 13)+;
	{normal}	is	  		 = '<-';

	// Operadores
	{normal}	not	  		 = 'nao';
	{normal}	and	  		 = 'e';
	{normal}	or	  		 = 'ou';
	{normal}	xor  		 = 'xor';
	{normal}	equal 		 = '=';
	{normal}	not_equal 	 = '<>';
	{normal}	less_eq 	 = '<=';
	{normal}	greater_eq   = '>=';
	{normal}	less 		 = '<';
	{normal}	greater 	 = '>';
	{normal}	plus 		 = '+';
	{normal}	minus 		 = '-';
	{normal}	mult         = '*';
	{normal}	div          = '/';
	{normal}	mod          = '%';

	// Palavras reservadas
	{normal}	program 	= 'programa';
	{normal}	begin 		= 'inicio';
	{normal}	end 		= 'fim.';
	{normal}	while		= 'enquanto';
	{normal}	end_w		= 'fim enquanto';
	{normal}	for			= 'para';
	{normal}	until		= 'ate';
	{normal}	from		= 'de';
	{normal}	end_f 		= 'fim para';
	{normal}	if			= 'se';
	{normal}	else		= 'senao';
	{normal}	end_if		= 'fim se';
	{normal}	do			= 'faca';
	{normal}	real 		= 'real';
	{normal}	integer 	= 'inteiro';
	{normal}	character	= 'caractere';
	{normal}	constant	= 'const';
	{normal}	read 		= 'leia';
	{normal}	write 		= 'escreva';
	{normal}	then 		= 'entao';
	{normal}	case 		= 'caso';
	{normal}	repeat		= 'repita';
	{normal}	pass		= 'passo';
	{normal}	evaluate 	= 'avalie';
	{normal}	end_e		= 'fim avalie';

	// Identificador
	{normal}	id 			 = ('_' | letter)('_'| letter | digit )*;

	// Tipos de dados
	{normal}	string 		 = '''(letter | ' ')*''';
	{normal}	n_real		 = '-' ? digit+ ',' digit+;
	{normal}	n_int		 = '_' ? digit+;

	// Comentários
	{normal->comment, comment}	comment 			= '/*';
	{comment}					comment_end 		= '*/';
	{comment} 					comment_body 		= [all - ['*' + '/']]*;
	{comment}					star 				= '*';
	{comment}					slash				= '/';
	{normal}					line_comment		= '//'[all-10]*10;

Ignored Tokens
	blank ,
	comment ,
	comment_end ,
	comment_body ,
	line_comment;

Productions

	programa {-> programa } = program id begin declaracao_star comando_star end {-> New programa(id,declaracao_star,comando_star)} ;

	declaracao_star = {lista} declaracao declaracao_star
	| {vazia} ;

	comando_star = {lista} comando comando_star
	| {vazio} ;

	valor =
		{string} 		string
	|	{integer} 		n_int
	|	{real} 			n_real;

	tipo =
		{real} 			real
	|	{integer} 		integer
	|	{char} 			character;

	var =
		{id} 			id
	| 	{matrix} 		id l_bra n_int r_bra;

	variavel_comma 		= {var_com} var comma;

	declaracao  =
		{variable} 		tipo colon variavel_comma* var semi_c
	| 	{constant} 		constant id valor semi_c
	;


	expr_comma 	   		= {exp_com} exp comma
							| {explog_com} exp_logica comma
							;
	opcional_else  		= {else_opc} else comando+;
	case_estrela   		= {case_star} case valor colon comando+;
	opcional_else_colon = {else_colon_opc} else colon comando+;


	var_value =
		{value}		 	valor
	| 	{variable} 		var
	;

	exp =
	  {plus}  exp plus termo 	{-> New exp.plus(exp, termo.exp)  }
	| {minus}  exp minus termo	{-> New exp.minus(exp, termo.exp)  }
	| {termo} termo {-> termo.exp}
	;

	termo {-> exp} =
	  {mult} termo mult fator	{-> New exp.mult(termo.exp, fator.exp ) }
	| {div} termo div fator		{-> New exp.div(termo.exp, fator.exp ) }
	| {fator} fator {-> fator.exp  }
	;

	fator {-> exp} =
	  {l_exp_r} minus? l_par exp r_par 	{-> exp}
	| {var_value} var_value	{-> New exp.var_value(var_value)}
	;

	exp_logica =
	  {or} exp_logica or exp_logica2 {-> New exp_logica.or(exp_logica, exp_logica2.exp_logica)  }
	| {exp_logica2} exp_logica2  {-> exp_logica2.exp_logica}
	;

	exp_logica2 {-> exp_logica} =
	  {xor} exp_logica2 xor exp_logica3 {-> New exp_logica.xor(exp_logica2.exp_logica, exp_logica3.exp_logica)  }
	| {exp_logica3} exp_logica3  {-> exp_logica3.exp_logica}
	;

	exp_logica3 {-> exp_logica} =
	  {and} exp_logica3 and exp_logica4 {-> New exp_logica.and(exp_logica3.exp_logica,exp_logica4.exp_logica)}
	| {and_n} exp_logica3 and not exp_logica4 {-> New exp_logica.and_n(exp_logica3.exp_logica,exp_logica4.exp_logica)}
	| {exp_logica4} exp_logica4 { -> exp_logica4.exp_logica}
	| {exp_logica4_n} not exp_logica4 { -> New exp_logica.negation(exp_logica4.exp_logica)}
	;

	exp_logica4 {-> exp_logica} =
	  {equal} exp equal var_value {-> New exp_logica.equal(exp,var_value)}
	| {not_equal} 		exp not_equal	var_value {-> New exp_logica.not_equal(exp,var_value)}
	| {less_eq} 		exp less_eq		var_value {-> New exp_logica.less_eq(exp,var_value)}
	| {less} 			exp less 		var_value {-> New exp_logica.less(exp,var_value)}
	| {greater_eq} 		exp greater_eq  var_value {-> New exp_logica.greater_eq(exp,var_value)}
	| {greater} 		exp greater     var_value {-> New exp_logica.greater(exp,var_value)}
	|{par_exp} l_par exp_logica r_par {-> exp_logica}
	;

	step = {passo} pass n_int;

	comando =
	  	{atrib} 		var is exp semi_c
	|	{atrib_log}		var is exp_logica semi_c
	| 	{read}			read l_par variavel_comma+ r_par semi_c
	| 	{write}			write l_par expr_comma+ r_par semi_c
	| 	{if}			if l_par exp_logica r_par then comando+ opcional_else? end_if semi_c
	| 	{evaluate}		evaluate l_par exp r_par case_estrela* opcional_else_colon? end_e semi_c
	|	{evaluate_log} 	evaluate l_par exp_logica r_par case_estrela* opcional_else_colon? end_e semi_c
	| 	{while}			while l_par exp_logica r_par do comando+ end_w semi_c
	| 	{repeat}		repeat comando+ until l_par exp_logica r_par semi_c
	| 	{for_one}		for var from [start]:n_int step? until [stop]:n_int do comando+ end_f semi_c
	;

Abstract Syntax Tree

	programa = id declaracao_star comando_star;

	declaracao_star = {lista} declaracao declaracao_star
	| {vazia};

	comando_star = {lista} comando comando_star
	| {vazio};

	expr_comma 	   		= {exp_com} exp comma
							| {explog_com} exp_logica comma
							;
	opcional_else  		= {else_opc} else comando+;
	case_estrela   		= {case_star} case valor colon comando+;
	opcional_else_colon = {else_colon_opc} else colon comando+;

	valor =
		{string} 		string
	|	{integer} 		n_int
	|	{real} 			n_real;

	tipo =
		{real} 			real
	|	{integer} 		integer
	|	{char} 			character;

	var =
		{id} 			id
	| 	{matrix} 		id l_bra n_int r_bra;

	variavel_comma 		=
		{var_com} var comma
	;

	declaracao =
		{variable} 		tipo colon variavel_comma* var semi_c
	| 	{constant} 		constant id valor semi_c
	;

	comando =
		{atrib} 		var is exp semi_c
	|	{atrib_log}		var is exp_logica semi_c
	| 	{read}			read l_par variavel_comma+ r_par semi_c
	| 	{write}			write l_par expr_comma+ r_par semi_c
	| 	{if}			if l_par exp_logica r_par then comando+ opcional_else? end_if semi_c
	| 	{evaluate}		evaluate l_par exp r_par case_estrela* opcional_else_colon? end_e semi_c
	|	{evaluate_log} 	evaluate l_par exp_logica r_par case_estrela* opcional_else_colon? end_e semi_c
	| 	{while}			while l_par exp_logica r_par do comando+ end_w semi_c
	| 	{repeat}		repeat comando+ until l_par exp_logica r_par semi_c
	| 	{for_one}		for var from [start]:n_int step? until [stop]:n_int do comando+ end_f semi_c
	;

	var_value =
		{value}		 	valor
	| 	{variable} 		var;

	exp =
      {plus}   [l]:exp [r]:exp
    | {minus}  [l]:exp [r]:exp
    | {div}    [l]:exp [r]:exp
    | {mult}   [l]:exp [r]:exp
	| {var_value} var_value
    ;

    exp_logica=
      {or}			[l]:exp_logica [r]:exp_logica
    | {xor}			[l]:exp_logica [r]:exp_logica
    | {and}			[l]:exp_logica [r]:exp_logica
    | {and_n}		[l]:exp_logica [r]:exp_logica
    | {equal}		exp var_value
	| {not_equal}	exp var_value
	| {less_eq}		exp var_value
	| {less}		exp var_value
	| {greater_eq}	exp var_value
	| {greater}		exp var_value
	| {negation}	exp_logica
	| {exp}			exp
	;

	step = {passo} pass n_int;