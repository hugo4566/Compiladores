Helpers
	all			 = [0 .. 0xffff];
	letter		 = [['a'..'z']+['A'..'Z']];
	digit 		 = ['0'..'9'];

States
	normal,
	comment;

Tokens

	// Símbolos
	{normal}	l_par        = '(';
	{normal}	r_par        = ')';
	{normal}	l_bra		 = '[';
	{normal}	r_bra		 = ']';
	{normal}	colon		 = ':';
	{normal}	semi_c		 = ';';
	{normal}	comma		 = ',';
	{normal}	dot			 = '.';
	{normal}	blank        = (' '| 9 | 10 | 13)+;
	{normal}	is	  		 = '<-';

	// Comentários
	{normal->comment,comment}	block_comment 		= '/*';
	{comment->normal}			end_block_comment 	= '*/';
	{comment}					comment_body 		= [all - ['*' + '/']]*;

	// Operadores
	{normal}	not	  		 = 'nao';
	{normal}	and	  		 = 'e';
	{normal}	or	  		 = 'ou';
	{normal}	xor  		 = 'xor';
	{normal}	equal 		 = '=';
	{normal}	not_equal 	 = '<>';
	{normal}	less_eq 	 = '<=';
	{normal}	greater_eq   = '>=';
	{normal}	less 		 = '<';
	{normal}	greater 	 = '>';
	{normal}	plus 		 = '+';
	{normal}	minus 		 = '-';
	{normal}	mult         = '*';
	{normal}	div          = '/';
	{normal}	mod          = '%';

	// Palavras reservadas
	{normal}	program 	= 'programa';
	{normal}	begin 		= 'inicio';
	{normal}	end 		= 'fim';
	{normal}	while		= 'enquanto';
	{normal}	end_w		= 'fim enquanto';
	{normal}	for			= 'para';
	{normal}	until		= 'ate';
	{normal}	from		= 'de';
	{normal}	end_f 		= 'fim para';
	{normal}	if			= 'se';
	{normal}	else		= 'senao';
	{normal}	end_if		= 'fim se';
	{normal}	do			= 'faca';
	{normal}	real 		= 'real';
	{normal}	integer 	= 'inteiro';
	{normal}	character	= 'caractere';
	{normal}	constant	= 'const';
	{normal}	read 		= 'leia';
	{normal}	write 		= 'escreva';
	{normal}	then 		= 'entao';
	{normal}	case 		= 'caso';
	{normal}	repeat		= 'repita';
	{normal}	pass		= 'passo';
	{normal}	evaluate 	= 'avalie';
	{normal}	end_e		= 'fim avalie';

	// Identificador
	{normal}	id 			 = ('_' | letter)('_'| letter | digit )*;

	// Tipos de dados
	{normal}	string 		 = letter+;
	{normal}	n_real		 = '-' ? digit+ '.' digit+;
	{normal}	n_int		 = digit+;

Ignored Tokens
	blank;

Productions
	var = 
		{id} 			id
	| 	{matrix} 		id l_bra n_int r_bra;

	valor = 
		{string} 		string
	|	{integer} 		n_int 
	|	{real} 			n_real;

	exp =
	  	{value}		 	valor
	| 	{variable} 		var
	| 	{l_exp_r} 		l_par exp r_par
	| 	{minus_exp}		minus exp
	| 	{exp_p_exp}		[pre]:exp plus [pos]:exp
	| 	{exp_m_exp}		[pre]:exp minus [pos]:exp
	| 	{exp_x_exp}		[pre]:exp mult [pos]:exp
	| 	{exp_div_exp}	[pre]:exp div [pos]:exp
	| 	{explog}		exp_logica;

	exp_logica =
	 	{exp_eq_exp} 	[pre]:exp equal [pos]:exp
	|	{exp_neq_exp} 	[pre]:exp not_equal [pos]:exp
	|	{exp_leq_exp} 	[pre]:exp less_eq [pos]:exp
	|	{exp_geq_exp} 	[pre]:exp greater_eq [pos]:exp
	|	{exp_less_exp} 	[pre]:exp less [pos]:exp
	|	{exp_great_exp}	[pre]:exp greater [pos]:exp
	|	{not_exp} 		not exp_logica
	|	{and_exp} 		[pre]:exp_logica and [pos]:exp_logica
	|	{or_exp} 		[pre]:exp_logica or [pos]:exp_logica
	|	{xor_exp} 		[pre]:exp_logica xor [pos]:exp_logica;


	variavel_comma 		= {var_com} var comma;
	expr_comma 	   		= {exp_com} exp comma;
	comando_semi_c 		= {comando_semic} comando semi_c;
	opcional_else  		= {else_opc} else comando_semi_c+;
	case_estrela   		= {case_star} case valor colon comando_semi_c+;
	opcional_else_colon = {else_colon_opc} else colon comando_semi_c+;

	comando =
	  	{atrib} 		var is exp semi_c
	| 	{read}			read l_par variavel_comma* var r_par semi_c
	| 	{write}			write l_par expr_comma* exp r_par semi_c
	| 	{if}			if l_par exp_logica r_par then comando_semi_c+ opcional_else? end_if semi_c
	| 	{evaluate}		evaluate l_par exp r_par case_estrela* opcional_else_colon? end_e semi_c
	| 	{while}			while l_par exp_logica r_par do comando_semi_c+ end_w semi_c
	| 	{repeat}		repeat comando_semi_c+ until l_par exp_logica r_par semi_c
	| 	{for_one}		for var from [start]:n_int until [stop]:n_int do comando_semi_c+ end_f semi_c
	| 	{for_x}			for var from [start]:n_int pass [step]:n_int until [stop]:n_int do comando_semi_c+ end_f semi_c;

	tipo = 
		{real} 			real 
	|	{integer} 		integer 
	|	{char} 			character;

	declaracao = 
		{variable} 		tipo colon variavel_comma* var semi_c
	| 	{constant} 		constant id valor semi_c ;

	programa = program id begin declaracao* comando* end dot;
