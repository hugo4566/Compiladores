/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAIdVar(AIdVar node);
    void caseAMatrizVar(AMatrizVar node);
    void caseAStringValor(AStringValor node);
    void caseAInteiroValor(AInteiroValor node);
    void caseARealValor(ARealValor node);
    void caseAValExp(AValExp node);
    void caseAVariavelExp(AVariavelExp node);
    void caseALexprExp(ALexprExp node);
    void caseANegativoExp(ANegativoExp node);
    void caseAMaisExp(AMaisExp node);
    void caseAMenosExp(AMenosExp node);
    void caseAVezesExp(AVezesExp node);
    void caseADivisaoExp(ADivisaoExp node);
    void caseAExplogExp(AExplogExp node);
    void caseAIgualExpLogica(AIgualExpLogica node);
    void caseADiferenteExpLogica(ADiferenteExpLogica node);
    void caseAMenorigualExpLogica(AMenorigualExpLogica node);
    void caseAMaiorigualExpLogica(AMaiorigualExpLogica node);
    void caseAMenorqExpLogica(AMenorqExpLogica node);
    void caseAMaiorqExpLogica(AMaiorqExpLogica node);
    void caseANaoExpLogica(ANaoExpLogica node);
    void caseAEExpLogica(AEExpLogica node);
    void caseAOuExpLogica(AOuExpLogica node);
    void caseAXouExpLogica(AXouExpLogica node);
    void caseAVarcomVariavelComma(AVarcomVariavelComma node);
    void caseAExpcomExprComma(AExpcomExprComma node);
    void caseAComandosemiComandoSemiC(AComandosemiComandoSemiC node);
    void caseAElseopcOpcionalElse(AElseopcOpcionalElse node);
    void caseACasestarCaseEstrela(ACasestarCaseEstrela node);
    void caseAElsecolonopcOpcionalElseColon(AElsecolonopcOpcionalElseColon node);
    void caseAAtribComando(AAtribComando node);
    void caseALerComando(ALerComando node);
    void caseAEscreverComando(AEscreverComando node);
    void caseASeComando(ASeComando node);
    void caseAAvaliarComando(AAvaliarComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseARepetirComando(ARepetirComando node);
    void caseAParaumemumComando(AParaumemumComando node);
    void caseAParaxComando(AParaxComando node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseACharTipo(ACharTipo node);
    void caseAVariavelDeclaracao(AVariavelDeclaracao node);
    void caseAConstanteDeclaracao(AConstanteDeclaracao node);
    void caseAPrograma(APrograma node);

    void caseTId(TId node);
    void caseTString(TString node);
    void caseTNInt(TNInt node);
    void caseTNReal(TNReal node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLCol(TLCol node);
    void caseTRCol(TRCol node);
    void caseTColon(TColon node);
    void caseTSemiC(TSemiC node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTBlank(TBlank node);
    void caseTIs(TIs node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXorl(TXorl node);
    void caseTEqual(TEqual node);
    void caseTNotEqual(TNotEqual node);
    void caseTMenorEqual(TMenorEqual node);
    void caseTMaiorEqual(TMaiorEqual node);
    void caseTMenorq(TMenorq node);
    void caseTMaiorq(TMaiorq node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTProgram(TProgram node);
    void caseTBegin(TBegin node);
    void caseTEnd(TEnd node);
    void caseTWhile(TWhile node);
    void caseTEndW(TEndW node);
    void caseTFor(TFor node);
    void caseTUntil(TUntil node);
    void caseTFrom(TFrom node);
    void caseTEndF(TEndF node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTEndIf(TEndIf node);
    void caseTDo(TDo node);
    void caseTReal(TReal node);
    void caseTInteiro(TInteiro node);
    void caseTCharacter(TCharacter node);
    void caseTConstante(TConstante node);
    void caseTR(TR node);
    void caseTW(TW node);
    void caseTThen(TThen node);
    void caseTCase(TCase node);
    void caseTRepeat(TRepeat node);
    void caseTPass(TPass node);
    void caseTEvaluate(TEvaluate node);
    void caseTEndE(TEndE node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
