/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatrizVar(AMatrizVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValExp(AValExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariavelExp(AVariavelExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALexprExp(ALexprExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegativoExp(ANegativoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaisExp(AMaisExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVezesExp(AVezesExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivisaoExp(ADivisaoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExplogExp(AExplogExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIgualExpLogica(AIgualExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorqExpLogica(AMenorqExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorqExpLogica(AMaiorqExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANaoExpLogica(ANaoExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEExpLogica(AEExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExpLogica(AOuExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXouExpLogica(AXouExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarcomVariavelComma(AVarcomVariavelComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpcomExprComma(AExpcomExprComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandosemiComandoSemiC(AComandosemiComandoSemiC node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseopcOpcionalElse(AElseopcOpcionalElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACasestarCaseEstrela(ACasestarCaseEstrela node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElsecolonopcOpcionalElseColon(AElsecolonopcOpcionalElseColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtribComando(AAtribComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALerComando(ALerComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEscreverComando(AEscreverComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAvaliarComando(AAvaliarComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepetirComando(ARepetirComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaumemumComando(AParaumemumComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParaxComando(AParaxComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharTipo(ACharTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstanteDeclaracao(AConstanteDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNInt(TNInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNReal(TNReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLCol(TLCol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRCol(TRCol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemiC(TSemiC node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXorl(TXorl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEqual(TNotEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorEqual(TMenorEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorEqual(TMaiorEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorq(TMenorq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorq(TMaiorq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProgram(TProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndW(TEndW node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUntil(TUntil node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndF(TEndF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndIf(TEndIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteiro(TInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharacter(TCharacter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstante(TConstante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTR(TR node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTW(TW node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRepeat(TRepeat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPass(TPass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEvaluate(TEvaluate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndE(TEndE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
