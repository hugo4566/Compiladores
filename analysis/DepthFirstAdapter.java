/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPVar().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAMatrizVar(AMatrizVar node)
    {
        defaultIn(node);
    }

    public void outAMatrizVar(AMatrizVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizVar(AMatrizVar node)
    {
        inAMatrizVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLCol() != null)
        {
            node.getLCol().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getRCol() != null)
        {
            node.getRCol().apply(this);
        }
        outAMatrizVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAInteiroValor(AInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAInteiroValor(AInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        inAInteiroValor(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outAInteiroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAValExp(AValExp node)
    {
        defaultIn(node);
    }

    public void outAValExp(AValExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValExp(AValExp node)
    {
        inAValExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValExp(node);
    }

    public void inAVariavelExp(AVariavelExp node)
    {
        defaultIn(node);
    }

    public void outAVariavelExp(AVariavelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExp(AVariavelExp node)
    {
        inAVariavelExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelExp(node);
    }

    public void inALexprExp(ALexprExp node)
    {
        defaultIn(node);
    }

    public void outALexprExp(ALexprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALexprExp(ALexprExp node)
    {
        inALexprExp(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outALexprExp(node);
    }

    public void inANegativoExp(ANegativoExp node)
    {
        defaultIn(node);
    }

    public void outANegativoExp(ANegativoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExp(ANegativoExp node)
    {
        inANegativoExp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANegativoExp(node);
    }

    public void inAMaisExp(AMaisExp node)
    {
        defaultIn(node);
    }

    public void outAMaisExp(AMaisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExp(AMaisExp node)
    {
        inAMaisExp(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAMaisExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAMenosExp(node);
    }

    public void inAVezesExp(AVezesExp node)
    {
        defaultIn(node);
    }

    public void outAVezesExp(AVezesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVezesExp(AVezesExp node)
    {
        inAVezesExp(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAVezesExp(node);
    }

    public void inADivisaoExp(ADivisaoExp node)
    {
        defaultIn(node);
    }

    public void outADivisaoExp(ADivisaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoExp(ADivisaoExp node)
    {
        inADivisaoExp(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outADivisaoExp(node);
    }

    public void inAExplogExp(AExplogExp node)
    {
        defaultIn(node);
    }

    public void outAExplogExp(AExplogExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplogExp(AExplogExp node)
    {
        inAExplogExp(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExplogExp(node);
    }

    public void inAIgualExpLogica(AIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualExpLogica(AIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpLogica(AIgualExpLogica node)
    {
        inAIgualExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAIgualExpLogica(node);
    }

    public void inADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpLogica(ADiferenteExpLogica node)
    {
        inADiferenteExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outADiferenteExpLogica(node);
    }

    public void inAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        inAMenorigualExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getMenorEqual() != null)
        {
            node.getMenorEqual().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAMenorigualExpLogica(node);
    }

    public void inAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        inAMaiorigualExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getMaiorEqual() != null)
        {
            node.getMaiorEqual().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAMaiorigualExpLogica(node);
    }

    public void inAMenorqExpLogica(AMenorqExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorqExpLogica(AMenorqExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorqExpLogica(AMenorqExpLogica node)
    {
        inAMenorqExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getMenorq() != null)
        {
            node.getMenorq().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAMenorqExpLogica(node);
    }

    public void inAMaiorqExpLogica(AMaiorqExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorqExpLogica(AMaiorqExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorqExpLogica(AMaiorqExpLogica node)
    {
        inAMaiorqExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getMaiorq() != null)
        {
            node.getMaiorq().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAMaiorqExpLogica(node);
    }

    public void inANaoExpLogica(ANaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExpLogica(ANaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpLogica(ANaoExpLogica node)
    {
        inANaoExpLogica(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outANaoExpLogica(node);
    }

    public void inAEExpLogica(AEExpLogica node)
    {
        defaultIn(node);
    }

    public void outAEExpLogica(AEExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpLogica(AEExpLogica node)
    {
        inAEExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAEExpLogica(node);
    }

    public void inAOuExpLogica(AOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpLogica(AOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpLogica(AOuExpLogica node)
    {
        inAOuExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAOuExpLogica(node);
    }

    public void inAXouExpLogica(AXouExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXouExpLogica(AXouExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXouExpLogica(AXouExpLogica node)
    {
        inAXouExpLogica(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        if(node.getXorl() != null)
        {
            node.getXorl().apply(this);
        }
        if(node.getPos() != null)
        {
            node.getPos().apply(this);
        }
        outAXouExpLogica(node);
    }

    public void inAAtribComando(AAtribComando node)
    {
        defaultIn(node);
    }

    public void outAAtribComando(AAtribComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribComando(AAtribComando node)
    {
        inAAtribComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        outAAtribComando(node);
    }
}
