/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AElseColonOpcOpcionalElseColon extends POpcionalElseColon
{
    private TElse _else_;
    private TColon _colon_;
    private final LinkedList<PComandoSemiC> _comandoSemiC_ = new LinkedList<PComandoSemiC>();

    public AElseColonOpcOpcionalElseColon()
    {
        // Constructor
    }

    public AElseColonOpcOpcionalElseColon(
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") List<?> _comandoSemiC_)
    {
        // Constructor
        setElse(_else_);

        setColon(_colon_);

        setComandoSemiC(_comandoSemiC_);

    }

    @Override
    public Object clone()
    {
        return new AElseColonOpcOpcionalElseColon(
            cloneNode(this._else_),
            cloneNode(this._colon_),
            cloneList(this._comandoSemiC_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseColonOpcOpcionalElseColon(this);
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public LinkedList<PComandoSemiC> getComandoSemiC()
    {
        return this._comandoSemiC_;
    }

    public void setComandoSemiC(List<?> list)
    {
        for(PComandoSemiC e : this._comandoSemiC_)
        {
            e.parent(null);
        }
        this._comandoSemiC_.clear();

        for(Object obj_e : list)
        {
            PComandoSemiC e = (PComandoSemiC) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comandoSemiC_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._else_)
            + toString(this._colon_)
            + toString(this._comandoSemiC_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._comandoSemiC_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        for(ListIterator<PComandoSemiC> i = this._comandoSemiC_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandoSemiC) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
