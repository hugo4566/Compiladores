/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AExpDivExpExp extends PExp
{
    private PExp _pre_;
    private TDiv _div_;
    private PExp _pos_;

    public AExpDivExpExp()
    {
        // Constructor
    }

    public AExpDivExpExp(
        @SuppressWarnings("hiding") PExp _pre_,
        @SuppressWarnings("hiding") TDiv _div_,
        @SuppressWarnings("hiding") PExp _pos_)
    {
        // Constructor
        setPre(_pre_);

        setDiv(_div_);

        setPos(_pos_);

    }

    @Override
    public Object clone()
    {
        return new AExpDivExpExp(
            cloneNode(this._pre_),
            cloneNode(this._div_),
            cloneNode(this._pos_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpDivExpExp(this);
    }

    public PExp getPre()
    {
        return this._pre_;
    }

    public void setPre(PExp node)
    {
        if(this._pre_ != null)
        {
            this._pre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pre_ = node;
    }

    public TDiv getDiv()
    {
        return this._div_;
    }

    public void setDiv(TDiv node)
    {
        if(this._div_ != null)
        {
            this._div_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._div_ = node;
    }

    public PExp getPos()
    {
        return this._pos_;
    }

    public void setPos(PExp node)
    {
        if(this._pos_ != null)
        {
            this._pos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pos_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pre_)
            + toString(this._div_)
            + toString(this._pos_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pre_ == child)
        {
            this._pre_ = null;
            return;
        }

        if(this._div_ == child)
        {
            this._div_ = null;
            return;
        }

        if(this._pos_ == child)
        {
            this._pos_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pre_ == oldChild)
        {
            setPre((PExp) newChild);
            return;
        }

        if(this._div_ == oldChild)
        {
            setDiv((TDiv) newChild);
            return;
        }

        if(this._pos_ == oldChild)
        {
            setPos((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
