/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AExpEqExpExpLogica extends PExpLogica
{
    private PExp _pre_;
    private TEqual _equal_;
    private PVarValueExp _varValueExp_;

    public AExpEqExpExpLogica()
    {
        // Constructor
    }

    public AExpEqExpExpLogica(
        @SuppressWarnings("hiding") PExp _pre_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PVarValueExp _varValueExp_)
    {
        // Constructor
        setPre(_pre_);

        setEqual(_equal_);

        setVarValueExp(_varValueExp_);

    }

    @Override
    public Object clone()
    {
        return new AExpEqExpExpLogica(
            cloneNode(this._pre_),
            cloneNode(this._equal_),
            cloneNode(this._varValueExp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpEqExpExpLogica(this);
    }

    public PExp getPre()
    {
        return this._pre_;
    }

    public void setPre(PExp node)
    {
        if(this._pre_ != null)
        {
            this._pre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pre_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PVarValueExp getVarValueExp()
    {
        return this._varValueExp_;
    }

    public void setVarValueExp(PVarValueExp node)
    {
        if(this._varValueExp_ != null)
        {
            this._varValueExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varValueExp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pre_)
            + toString(this._equal_)
            + toString(this._varValueExp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pre_ == child)
        {
            this._pre_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._varValueExp_ == child)
        {
            this._varValueExp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pre_ == oldChild)
        {
            setPre((PExp) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._varValueExp_ == oldChild)
        {
            setVarValueExp((PVarValueExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
