/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AExpOp4ExpExpLogica4 extends PExpLogica4
{
    private PExp _pre_;
    private POp4 _op4_;
    private PVarValue _varValue_;

    public AExpOp4ExpExpLogica4()
    {
        // Constructor
    }

    public AExpOp4ExpExpLogica4(
        @SuppressWarnings("hiding") PExp _pre_,
        @SuppressWarnings("hiding") POp4 _op4_,
        @SuppressWarnings("hiding") PVarValue _varValue_)
    {
        // Constructor
        setPre(_pre_);

        setOp4(_op4_);

        setVarValue(_varValue_);

    }

    @Override
    public Object clone()
    {
        return new AExpOp4ExpExpLogica4(
            cloneNode(this._pre_),
            cloneNode(this._op4_),
            cloneNode(this._varValue_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpOp4ExpExpLogica4(this);
    }

    public PExp getPre()
    {
        return this._pre_;
    }

    public void setPre(PExp node)
    {
        if(this._pre_ != null)
        {
            this._pre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pre_ = node;
    }

    public POp4 getOp4()
    {
        return this._op4_;
    }

    public void setOp4(POp4 node)
    {
        if(this._op4_ != null)
        {
            this._op4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op4_ = node;
    }

    public PVarValue getVarValue()
    {
        return this._varValue_;
    }

    public void setVarValue(PVarValue node)
    {
        if(this._varValue_ != null)
        {
            this._varValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pre_)
            + toString(this._op4_)
            + toString(this._varValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pre_ == child)
        {
            this._pre_ = null;
            return;
        }

        if(this._op4_ == child)
        {
            this._op4_ = null;
            return;
        }

        if(this._varValue_ == child)
        {
            this._varValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pre_ == oldChild)
        {
            setPre((PExp) newChild);
            return;
        }

        if(this._op4_ == oldChild)
        {
            setOp4((POp4) newChild);
            return;
        }

        if(this._varValue_ == oldChild)
        {
            setVarValue((PVarValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
