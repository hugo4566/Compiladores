/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AForOneComando extends PComando
{
    private TFor _for_;
    private PVar _var_;
    private TFrom _from_;
    private TNInt _start_;
    private PStep _step_;
    private TUntil _until_;
    private TNInt _stop_;
    private TDo _do_;
    private final LinkedList<PComando> _comando_ = new LinkedList<PComando>();
    private TEndF _endF_;
    private TSemiC _semiC_;

    public AForOneComando()
    {
        // Constructor
    }

    public AForOneComando(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TFrom _from_,
        @SuppressWarnings("hiding") TNInt _start_,
        @SuppressWarnings("hiding") PStep _step_,
        @SuppressWarnings("hiding") TUntil _until_,
        @SuppressWarnings("hiding") TNInt _stop_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") List<?> _comando_,
        @SuppressWarnings("hiding") TEndF _endF_,
        @SuppressWarnings("hiding") TSemiC _semiC_)
    {
        // Constructor
        setFor(_for_);

        setVar(_var_);

        setFrom(_from_);

        setStart(_start_);

        setStep(_step_);

        setUntil(_until_);

        setStop(_stop_);

        setDo(_do_);

        setComando(_comando_);

        setEndF(_endF_);

        setSemiC(_semiC_);

    }

    @Override
    public Object clone()
    {
        return new AForOneComando(
            cloneNode(this._for_),
            cloneNode(this._var_),
            cloneNode(this._from_),
            cloneNode(this._start_),
            cloneNode(this._step_),
            cloneNode(this._until_),
            cloneNode(this._stop_),
            cloneNode(this._do_),
            cloneList(this._comando_),
            cloneNode(this._endF_),
            cloneNode(this._semiC_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForOneComando(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TFrom getFrom()
    {
        return this._from_;
    }

    public void setFrom(TFrom node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public TNInt getStart()
    {
        return this._start_;
    }

    public void setStart(TNInt node)
    {
        if(this._start_ != null)
        {
            this._start_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._start_ = node;
    }

    public PStep getStep()
    {
        return this._step_;
    }

    public void setStep(PStep node)
    {
        if(this._step_ != null)
        {
            this._step_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._step_ = node;
    }

    public TUntil getUntil()
    {
        return this._until_;
    }

    public void setUntil(TUntil node)
    {
        if(this._until_ != null)
        {
            this._until_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._until_ = node;
    }

    public TNInt getStop()
    {
        return this._stop_;
    }

    public void setStop(TNInt node)
    {
        if(this._stop_ != null)
        {
            this._stop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stop_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public LinkedList<PComando> getComando()
    {
        return this._comando_;
    }

    public void setComando(List<?> list)
    {
        for(PComando e : this._comando_)
        {
            e.parent(null);
        }
        this._comando_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comando_.add(e);
        }
    }

    public TEndF getEndF()
    {
        return this._endF_;
    }

    public void setEndF(TEndF node)
    {
        if(this._endF_ != null)
        {
            this._endF_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endF_ = node;
    }

    public TSemiC getSemiC()
    {
        return this._semiC_;
    }

    public void setSemiC(TSemiC node)
    {
        if(this._semiC_ != null)
        {
            this._semiC_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiC_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._var_)
            + toString(this._from_)
            + toString(this._start_)
            + toString(this._step_)
            + toString(this._until_)
            + toString(this._stop_)
            + toString(this._do_)
            + toString(this._comando_)
            + toString(this._endF_)
            + toString(this._semiC_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._start_ == child)
        {
            this._start_ = null;
            return;
        }

        if(this._step_ == child)
        {
            this._step_ = null;
            return;
        }

        if(this._until_ == child)
        {
            this._until_ = null;
            return;
        }

        if(this._stop_ == child)
        {
            this._stop_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._comando_.remove(child))
        {
            return;
        }

        if(this._endF_ == child)
        {
            this._endF_ = null;
            return;
        }

        if(this._semiC_ == child)
        {
            this._semiC_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(this._start_ == oldChild)
        {
            setStart((TNInt) newChild);
            return;
        }

        if(this._step_ == oldChild)
        {
            setStep((PStep) newChild);
            return;
        }

        if(this._until_ == oldChild)
        {
            setUntil((TUntil) newChild);
            return;
        }

        if(this._stop_ == oldChild)
        {
            setStop((TNInt) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        for(ListIterator<PComando> i = this._comando_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endF_ == oldChild)
        {
            setEndF((TEndF) newChild);
            return;
        }

        if(this._semiC_ == oldChild)
        {
            setSemiC((TSemiC) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
