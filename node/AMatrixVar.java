/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AMatrixVar extends PVar
{
    private TId _id_;
    private TLBra _lBra_;
    private TNInt _nInt_;
    private TRBra _rBra_;

    public AMatrixVar()
    {
        // Constructor
    }

    public AMatrixVar(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLBra _lBra_,
        @SuppressWarnings("hiding") TNInt _nInt_,
        @SuppressWarnings("hiding") TRBra _rBra_)
    {
        // Constructor
        setId(_id_);

        setLBra(_lBra_);

        setNInt(_nInt_);

        setRBra(_rBra_);

    }

    @Override
    public Object clone()
    {
        return new AMatrixVar(
            cloneNode(this._id_),
            cloneNode(this._lBra_),
            cloneNode(this._nInt_),
            cloneNode(this._rBra_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMatrixVar(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLBra getLBra()
    {
        return this._lBra_;
    }

    public void setLBra(TLBra node)
    {
        if(this._lBra_ != null)
        {
            this._lBra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBra_ = node;
    }

    public TNInt getNInt()
    {
        return this._nInt_;
    }

    public void setNInt(TNInt node)
    {
        if(this._nInt_ != null)
        {
            this._nInt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nInt_ = node;
    }

    public TRBra getRBra()
    {
        return this._rBra_;
    }

    public void setRBra(TRBra node)
    {
        if(this._rBra_ != null)
        {
            this._rBra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBra_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._lBra_)
            + toString(this._nInt_)
            + toString(this._rBra_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lBra_ == child)
        {
            this._lBra_ = null;
            return;
        }

        if(this._nInt_ == child)
        {
            this._nInt_ = null;
            return;
        }

        if(this._rBra_ == child)
        {
            this._rBra_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lBra_ == oldChild)
        {
            setLBra((TLBra) newChild);
            return;
        }

        if(this._nInt_ == oldChild)
        {
            setNInt((TNInt) newChild);
            return;
        }

        if(this._rBra_ == oldChild)
        {
            setRBra((TRBra) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
