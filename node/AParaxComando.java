/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AParaxComando extends PComando
{
    private TFor _for_;
    private PVar _var_;
    private TFrom _from_;
    private TNInt _inicio_;
    private TPass _pass_;
    private TNInt _quantidade_;
    private TUntil _until_;
    private TNInt _fim_;
    private TDo _do_;
    private final LinkedList<PComandoSemiC> _comandoSemiC_ = new LinkedList<PComandoSemiC>();
    private PComando _comando_;
    private TSemiC _pre_;
    private TEndF _endF_;
    private TSemiC _pos_;

    public AParaxComando()
    {
        // Constructor
    }

    public AParaxComando(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TFrom _from_,
        @SuppressWarnings("hiding") TNInt _inicio_,
        @SuppressWarnings("hiding") TPass _pass_,
        @SuppressWarnings("hiding") TNInt _quantidade_,
        @SuppressWarnings("hiding") TUntil _until_,
        @SuppressWarnings("hiding") TNInt _fim_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") List<?> _comandoSemiC_,
        @SuppressWarnings("hiding") PComando _comando_,
        @SuppressWarnings("hiding") TSemiC _pre_,
        @SuppressWarnings("hiding") TEndF _endF_,
        @SuppressWarnings("hiding") TSemiC _pos_)
    {
        // Constructor
        setFor(_for_);

        setVar(_var_);

        setFrom(_from_);

        setInicio(_inicio_);

        setPass(_pass_);

        setQuantidade(_quantidade_);

        setUntil(_until_);

        setFim(_fim_);

        setDo(_do_);

        setComandoSemiC(_comandoSemiC_);

        setComando(_comando_);

        setPre(_pre_);

        setEndF(_endF_);

        setPos(_pos_);

    }

    @Override
    public Object clone()
    {
        return new AParaxComando(
            cloneNode(this._for_),
            cloneNode(this._var_),
            cloneNode(this._from_),
            cloneNode(this._inicio_),
            cloneNode(this._pass_),
            cloneNode(this._quantidade_),
            cloneNode(this._until_),
            cloneNode(this._fim_),
            cloneNode(this._do_),
            cloneList(this._comandoSemiC_),
            cloneNode(this._comando_),
            cloneNode(this._pre_),
            cloneNode(this._endF_),
            cloneNode(this._pos_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParaxComando(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TFrom getFrom()
    {
        return this._from_;
    }

    public void setFrom(TFrom node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public TNInt getInicio()
    {
        return this._inicio_;
    }

    public void setInicio(TNInt node)
    {
        if(this._inicio_ != null)
        {
            this._inicio_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inicio_ = node;
    }

    public TPass getPass()
    {
        return this._pass_;
    }

    public void setPass(TPass node)
    {
        if(this._pass_ != null)
        {
            this._pass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pass_ = node;
    }

    public TNInt getQuantidade()
    {
        return this._quantidade_;
    }

    public void setQuantidade(TNInt node)
    {
        if(this._quantidade_ != null)
        {
            this._quantidade_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._quantidade_ = node;
    }

    public TUntil getUntil()
    {
        return this._until_;
    }

    public void setUntil(TUntil node)
    {
        if(this._until_ != null)
        {
            this._until_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._until_ = node;
    }

    public TNInt getFim()
    {
        return this._fim_;
    }

    public void setFim(TNInt node)
    {
        if(this._fim_ != null)
        {
            this._fim_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fim_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public LinkedList<PComandoSemiC> getComandoSemiC()
    {
        return this._comandoSemiC_;
    }

    public void setComandoSemiC(List<?> list)
    {
        for(PComandoSemiC e : this._comandoSemiC_)
        {
            e.parent(null);
        }
        this._comandoSemiC_.clear();

        for(Object obj_e : list)
        {
            PComandoSemiC e = (PComandoSemiC) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comandoSemiC_.add(e);
        }
    }

    public PComando getComando()
    {
        return this._comando_;
    }

    public void setComando(PComando node)
    {
        if(this._comando_ != null)
        {
            this._comando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comando_ = node;
    }

    public TSemiC getPre()
    {
        return this._pre_;
    }

    public void setPre(TSemiC node)
    {
        if(this._pre_ != null)
        {
            this._pre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pre_ = node;
    }

    public TEndF getEndF()
    {
        return this._endF_;
    }

    public void setEndF(TEndF node)
    {
        if(this._endF_ != null)
        {
            this._endF_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endF_ = node;
    }

    public TSemiC getPos()
    {
        return this._pos_;
    }

    public void setPos(TSemiC node)
    {
        if(this._pos_ != null)
        {
            this._pos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pos_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._var_)
            + toString(this._from_)
            + toString(this._inicio_)
            + toString(this._pass_)
            + toString(this._quantidade_)
            + toString(this._until_)
            + toString(this._fim_)
            + toString(this._do_)
            + toString(this._comandoSemiC_)
            + toString(this._comando_)
            + toString(this._pre_)
            + toString(this._endF_)
            + toString(this._pos_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._inicio_ == child)
        {
            this._inicio_ = null;
            return;
        }

        if(this._pass_ == child)
        {
            this._pass_ = null;
            return;
        }

        if(this._quantidade_ == child)
        {
            this._quantidade_ = null;
            return;
        }

        if(this._until_ == child)
        {
            this._until_ = null;
            return;
        }

        if(this._fim_ == child)
        {
            this._fim_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._comandoSemiC_.remove(child))
        {
            return;
        }

        if(this._comando_ == child)
        {
            this._comando_ = null;
            return;
        }

        if(this._pre_ == child)
        {
            this._pre_ = null;
            return;
        }

        if(this._endF_ == child)
        {
            this._endF_ = null;
            return;
        }

        if(this._pos_ == child)
        {
            this._pos_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(this._inicio_ == oldChild)
        {
            setInicio((TNInt) newChild);
            return;
        }

        if(this._pass_ == oldChild)
        {
            setPass((TPass) newChild);
            return;
        }

        if(this._quantidade_ == oldChild)
        {
            setQuantidade((TNInt) newChild);
            return;
        }

        if(this._until_ == oldChild)
        {
            setUntil((TUntil) newChild);
            return;
        }

        if(this._fim_ == oldChild)
        {
            setFim((TNInt) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        for(ListIterator<PComandoSemiC> i = this._comandoSemiC_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandoSemiC) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._comando_ == oldChild)
        {
            setComando((PComando) newChild);
            return;
        }

        if(this._pre_ == oldChild)
        {
            setPre((TSemiC) newChild);
            return;
        }

        if(this._endF_ == oldChild)
        {
            setEndF((TEndF) newChild);
            return;
        }

        if(this._pos_ == oldChild)
        {
            setPos((TSemiC) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
