/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AXorExpExpLogica2 extends PExpLogica2
{
    private PExpLogica2 _pre_;
    private TXor _xor_;
    private PExpLogica3 _pos_;

    public AXorExpExpLogica2()
    {
        // Constructor
    }

    public AXorExpExpLogica2(
        @SuppressWarnings("hiding") PExpLogica2 _pre_,
        @SuppressWarnings("hiding") TXor _xor_,
        @SuppressWarnings("hiding") PExpLogica3 _pos_)
    {
        // Constructor
        setPre(_pre_);

        setXor(_xor_);

        setPos(_pos_);

    }

    @Override
    public Object clone()
    {
        return new AXorExpExpLogica2(
            cloneNode(this._pre_),
            cloneNode(this._xor_),
            cloneNode(this._pos_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAXorExpExpLogica2(this);
    }

    public PExpLogica2 getPre()
    {
        return this._pre_;
    }

    public void setPre(PExpLogica2 node)
    {
        if(this._pre_ != null)
        {
            this._pre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pre_ = node;
    }

    public TXor getXor()
    {
        return this._xor_;
    }

    public void setXor(TXor node)
    {
        if(this._xor_ != null)
        {
            this._xor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._xor_ = node;
    }

    public PExpLogica3 getPos()
    {
        return this._pos_;
    }

    public void setPos(PExpLogica3 node)
    {
        if(this._pos_ != null)
        {
            this._pos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pos_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pre_)
            + toString(this._xor_)
            + toString(this._pos_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pre_ == child)
        {
            this._pre_ = null;
            return;
        }

        if(this._xor_ == child)
        {
            this._xor_ = null;
            return;
        }

        if(this._pos_ == child)
        {
            this._pos_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pre_ == oldChild)
        {
            setPre((PExpLogica2) newChild);
            return;
        }

        if(this._xor_ == oldChild)
        {
            setXor((TXor) newChild);
            return;
        }

        if(this._pos_ == oldChild)
        {
            setPos((PExpLogica3) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
